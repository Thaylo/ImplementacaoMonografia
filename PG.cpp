#include "BateriaDeTestes.h"
#include "TimeSeries.h"
#include "CommonDebug.h"
#include "AsyncIO.h"

int repetitions = 20;
int iterations = 2000;
int firstInstanceIndex = 1;
int lastInstanceIndex = 360;

using namespace std;

#if 0
double estimatedTimeToAcomplish(char *operationMode, int rep, int iter)
{
    BateriaDeTestes b;
    
    clock_t start_time = clock();    
    clock_t end_time;
    srand(time(NULL));
    end_time = start_time;

    if(!strcmp(operationMode,"SMALL_SIZE"))
    {
        b.run(SMALL_SIZE, rep, iter);    
        end_time = clock(); 
    }
    else if(!strcmp(operationMode,"LARGE_SIZE"))
    {
        b.run(LARGE_SIZE, rep, iter); 
        end_time = clock(); 
    }
    else
    {
        printf("CONFIG VALUE FAILURE\n");
        return 0;
    }
    double delta = (end_time - start_time) / (double) CLOCKS_PER_SEC;
    return delta * (iterations*repetitions/(rep*iter)) / 3600.0;
}
#endif

static void runTests(char *operationMode)
{
    BateriaDeTestes b;
    int mode = SMALL_SIZE;

    if(!strcmp(operationMode,"LARGE_SIZE"))
    {
        mode = LARGE_SIZE;
    }
    
    b.run(mode, firstInstanceIndex, lastInstanceIndex, repetitions, iterations);
}

/*
    Para verificar se estÃ¡ tudo funcionando, rode o programa com os parametros ./teste 3 3 1 360
    Se nas pastas autogenerated/small e autogenerated/large tiverem, cada uma, 360 arquivos .m, 
    isso significa que o programa nao falou mizeravelmente.

    Para executar o verdadeiro teste, rode com os parametros:
    ./teste INICIO FIM 20 2000 LARGE
    e
    ./teste INICIO FIM 20 2000 SMALL
    onde INICIO e FIM sao os indices no range 1:360 das tarefas.
    Lembre-se que os testes SMALL serao muito mais rapidos.

*/
int main(int argc, char **argv)
{
    srand(time(NULL));
    bool isToRunSmall = true;
    bool isToRunLarge = true;


    if(argc >= 3)
    {
        firstInstanceIndex = atoi(argv[1]);
        lastInstanceIndex = atoi(argv[2]); 
        cout << "First and last instance index explicitly selected\n";
        printf("First = %d, last = %d\n", firstInstanceIndex, lastInstanceIndex);

        if(argc >= 5)
        {
            repetitions = atoi(argv[3]);
            iterations = atoi(argv[4]);
            cout << "Repetitions and iterations explicitly selected\n";
            printf("Rep = %d, iter = %d\n", repetitions, iterations);

            if(argc >= 6)
            {
                if (!strcmp(argv[5],(char*)"SMALL_SIZE") || !strcmp(argv[5],(char*)"SMALL"))
                {
                    isToRunLarge = false;
                    cout << "Each machine will perform small tests.\n";
                }
                else if (!strcmp(argv[5],(char*)"LARGE_SIZE") || !strcmp(argv[5],(char*)"LARGE"))
                {
                    isToRunSmall = false;
                    cout << "Each machine will perform large tests.\n";
                }
                else
                {
                    cout << "Each machine will perform both, large and small tests.\n";
                }
            }
        }
    }
    else
    {
        cout << "Running tests with default parameters\n";
        cout << "int repetitions = 20;\n";
        cout << "int iterations = 2000;\n";
        cout << "int firstInstanceIndex = 1;\n";
        cout << "int lastInstanceIndex = 360;\n";
        cout << "Each machine will perform both, large and small tests.\n";
    }

    cout << "O sistema permite " << std::thread::hardware_concurrency() << " threads\n";
    
    if (isToRunSmall)
    {
        runTests((char*)"SMALL_SIZE");
    }
    
    if (isToRunLarge)
    {
        runTests((char*)"LARGE_SIZE");
	}

    return 0;
}
